# GRADE 1. ЭТАП 1. Задание 5.
# Работа с объектами типа "дата"
import datetime

# Библиотека для раскрашивания консоли
from colorama import init, Fore, Back, Style

# Авто сброс покраски строчек (сброс заданного цвета строчки для каждой команды print)
init(autoreset=True)

# Укрощение (извращение) colorama's цветов, дико извиняюсь
r = Fore.RED
m = Fore.MAGENTA
c = Fore.CYAN
g = Fore.GREEN
lg = Fore.LIGHTGREEN_EX
y = Fore.YELLOW


# ФУНКЦИЯ ПОСТ-ПАУЗЫ
def console_pause():
    """Создаёт поле ввода в консоли.
    Представляет собой разделитель действий во время выполнения программы"""
    command_pause = input(g + '\nУспешно. Для продолжения работы нажмите клавишу ENTER...')

# ФУНКЦИЯ ПРОВЕРКИ ПОЛЬЗОВАТЕЛЬСКОГО ВВОДА
def correct_input(a):
    """Обрабатывает пользовательский ввод на наличие только пробелов либо пустого ввода

    Принимает: введенное пользователем значение
    Возвращает: True или False"""
    return a.isspace() == False and a != ''

# ФУНКЦИЯ ОТРИСОВКИ ЗАМЕТОК
def print_notes_loop():
    """Предназначения для читаемого вывода списка заметок и срока до дедлайна.

    Требует для работы: библиотеку import datetime и colorama;
    перебор списка словарей (обязательно с функцией enumerate), где каждый словарь помещается в переменную note;
    ключи 'Имя пользователя', 'Темы', 'Описание', 'Создана', 'Дата завершения', 'Статус'
    Содержит: ключи 'Создана' 'Дата завершения', цикл перебора словаря note
    Механизм: функция получает дату создания и дату завершения из итерации цикла перебора
    БД (на данный момент это список словарей) и сравнивает их, получая объект timedelta,
    а затем выводит его результат, при помощи блока условий. Другой цикл функции
    перебирает ключи и значения словаря с выводом через функцию print
    """
    # Получение временной (temp) текущей даты для вычисления объекта timedelta
    temp_created_date = datetime.datetime.strptime(note['Создана'], "%d-%m-%Y")
    temp_issue_date = datetime.datetime.strptime(note['Дата завершения'], "%d-%m-%Y")
    # Визуальный разделитель
    print('⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯')
    # Счетчик итератора, расположенного вне функции
    print(y + f'Заметка {iteration + 1}')
    # Перебор словаря note
    for key, value in note.items():
        # Соответствие типу данных list (для корректного вывода тем)
        if type(value) == list:
            print('▶ Тема: ', *value, sep=' |✎')
        # Вывод всех остальных типов данных
        else:
            print(f'▶ {key}: {value}')

        # Сравнение (temp) текущей даты и даты завершения deadline_var представляет собой объект timedelta
    if temp_created_date < temp_issue_date:
        deadline_var = temp_issue_date - temp_created_date
        print(lg + "↪ Осталось {} дней".format(deadline_var.days))
    elif temp_created_date > temp_issue_date:
        deadline_var = temp_created_date - temp_issue_date
        print(r + "↪ Просрочено на {} дней".format(deadline_var.days))
    else:
        print(r + '↪ Истекает сегодня')

# Список словарей с предустановленными заметками
notes_lst = [{'Имя пользователя': 'Влад',
              'Темы': ['Тестовый', 'заголовок'],
              'Описание': 'Тестовое описание-1 в заметке влада',
              'Создана': '15-12-2024',
              'Дата завершения': '15-12-2024'
              },
             {'Имя пользователя': 'Елена',
              'Темы': ['Тестовый 1', 'заголовок 1'],
              'Описание': 'Тестовое описание-2 в заметке Елены',
              'Создана': '15-12-2024',
              'Дата завершения': '10-01-2025'
              },
             {'Имя пользователя': 'Павел',
              'Темы': ['Тестовый 2', 'заголовок 2'],
              'Описание': 'Тестовое описание-3 в заметке Павла',
              'Создана': '15-12-2024',
              'Дата завершения': '02-01-2025'
              },
             {'Имя пользователя': 'Зульфия',
              'Темы': ['Тестовый 3', 'заголовок 3'],
              'Описание': 'Тестовое описание-4 в заметке Зульфии',
              'Создана': '15-12-2024',
              'Дата завершения': '01-01-1996'
              }
             ]

print(g+'* * ВАС ПРИВЕТСТВУЕТ МЕНЕДЖЕР ЗАМЕТОК 1.2.5 * *')
print(y+'\nДля проверки задания установите поле редактора на списке заметок \n(чтобы видеть поисковые фразы) и попробуйте '
        'удалить заметки разными способами, выведите список заметок')
#___________ОСНОВНОЙ ЦИКЛ ПРОГРАММЫ____________
while True:
    # Командное меню
    print(c + '\nВыберите команду, соответствующую пункту меню:'
              '\n○ Показать список заметок — 2 '
              '\n○ Удалить заметку         — 4 '
              '\n○ Завершить работу        — 5')


    # Пользовательский ввод команды
    command_add = input(m + '\nВведите команду: ')

    # ____КОМАНДА 2______Показать список заметок
    if command_add == '2':
        print(y + '\nОТОБРАЖЕНИЕ СПИСКА ЗАМЕТОК')
        if len(notes_lst) == 0:
            print(r+'\nСписок заметок пуст')
        for iteration, note in enumerate(notes_lst):
            print_notes_loop()

        console_pause()

    # ____КОМАНДА 4______Удаление заметки
    elif command_add == '4':
        print(y + '\nУДАЛЕНИЕ ЗАМЕТКИ')
        while True:
            print(c + '\nВыберите критерий поиска:'
                      '\n○ По имени пользователя    — 1'
                      '\n○ По теме заметки          — 2'
                      '\n○ По номеру заметки        — 3')
            # Пользовательский ввод команды
            how_search = input(m + '\nВведите команду: ')

                # _______Команда 1__________Поиск по имени пользователя
            if how_search == '1':
                    # Ввод поисковой фразы
                search_inp = input(m + '\nВведите имя пользователя для поиска: ')
                del_notes_lst = notes_lst.copy()                    # Копия листа с заметками
                name_del_notes = 0                                  # Переменная - счётчик удалённых заметок
                    # Цикл поиска и сравнения введённой фразы по копии листа
                for iteration, note in enumerate(del_notes_lst):
                        # Получение value ключа в переменную
                    value_dict = note.get('Имя пользователя')
                        # Сравнение переменной с поисковой фразой с переводом в нижний регистр
                    if value_dict.lower() == search_inp.lower():
                        notes_lst.remove(note)                      # если True, то удаление всей заметки
                        name_del_notes += 1                         # +1 к переменной счётчику
                 # Блок условий для вывода результата работы команды
                if name_del_notes != 0:
                    print(lg + f'Заметки, содержащие «Имя пользователя: {search_inp}» удалены ({name_del_notes})')
                else:
                    print(r + f'Заметок, содержащих «Имя пользователя: {search_inp}» не найдено')
                console_pause()
                break

                # _______Команда 2__________Поиск по темам
            elif how_search == '2':
                """По аналогии с предыдущим блоком (отличия подписаны)"""
                search_inp = input(m + 'Введите тему для поиска: ')
                del_notes_lst = notes_lst.copy()
                name_del_notes = 0
                for iteration, note in enumerate(del_notes_lst):
                    value_dict = note.get('Темы')
                     # Выражение генератор для поиска и сравнения совпадений в списке тем ключа 'Темы'
                    if search_inp.lower() in (item.lower() for item in value_dict):
                        notes_lst.remove(note)
                        name_del_notes += 1
                if name_del_notes != 0:
                    print(lg + f'Заметки, содержащие «Тему: {search_inp}» удалены ({name_del_notes})')
                else:
                    print(r + f'Заметок, содержащих «Тему: {search_inp}» не найдено')
                console_pause()
                break
            # _______Команда 3__________По номеру заметки
            elif how_search == '3':
                while True:
                    try:
                            # Предлагаем пользователю диапазон номеров заметок
                        print(c + f'Введите номер заметки для внесения изменений. '
                                  f'Доступные значения команды от 0 до {len(notes_lst)}')
                            # Получение команды от пользователя
                        note_change_command = int(input(m + '\nВведите команду: '))
                            # Блок проверки пользовательского ввода
                        if note_change_command < 1:
                            print(r + '(!) Такой заметки не существует')
                            continue
                        elif note_change_command > len(notes_lst):
                            print(r + '(!) Такой заметки не существует')
                            continue
                    except ValueError:
                        print(r + '(!) Команда должна быть целым числом')
                        continue
                        # Удаление заметки (номер заметки - 1) и двойной обрыв while
                    else:
                        break_flag = True
                        del notes_lst[(note_change_command - 1)]
                        print(lg + f'Заметка {note_change_command} успешно удалена!')
                        console_pause()
                        break
                if break_flag == True:
                    break
            else:
                print(r + '\n(!) Такой команды не существует! Пожалуйста, введите доступную команду.')
                continue
    # ____КОМАНДА 5______Выход из программы
    elif command_add == '5':
        pass
        break

    else:
        print(r + '\n(!) Такой команды не существует! Пожалуйста, введите доступную команду.')
        continue
